// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Protos/gizem.proto
// </auto-generated>
#pragma warning disable 0414, 1591
#region Designer generated code

using grpc = global::Grpc.Core;

namespace gizem {
  public static partial class Authentication
  {
    static readonly string __ServiceName = "gizem.Authentication";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::gizem.AuthenticationQ> __Marshaller_gizem_AuthenticationQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.AuthenticationQ.Parser));
    static readonly grpc::Marshaller<global::gizem.AuthenticationP> __Marshaller_gizem_AuthenticationP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.AuthenticationP.Parser));

    static readonly grpc::Method<global::gizem.AuthenticationQ, global::gizem.AuthenticationP> __Method_Login = new grpc::Method<global::gizem.AuthenticationQ, global::gizem.AuthenticationP>(
        grpc::MethodType.Unary,
        __ServiceName,
        "Login",
        __Marshaller_gizem_AuthenticationQ,
        __Marshaller_gizem_AuthenticationP);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gizem.GizemReflection.Descriptor.Services[0]; }
    }

    /// <summary>Base class for server-side implementations of Authentication</summary>
    [grpc::BindServiceMethod(typeof(Authentication), "BindService")]
    public abstract partial class AuthenticationBase
    {
      public virtual global::System.Threading.Tasks.Task<global::gizem.AuthenticationP> Login(global::gizem.AuthenticationQ request, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(AuthenticationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Login, serviceImpl.Login).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, AuthenticationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Login, serviceImpl == null ? null : new grpc::UnaryServerMethod<global::gizem.AuthenticationQ, global::gizem.AuthenticationP>(serviceImpl.Login));
    }

  }
  public static partial class WebRTCSignal
  {
    static readonly string __ServiceName = "gizem.WebRTCSignal";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::gizem.SubscribeSessionQ> __Marshaller_gizem_SubscribeSessionQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.SubscribeSessionQ.Parser));
    static readonly grpc::Marshaller<global::gizem.SubscribeSessionP> __Marshaller_gizem_SubscribeSessionP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.SubscribeSessionP.Parser));
    static readonly grpc::Marshaller<global::gizem.SendEventQ> __Marshaller_gizem_SendEventQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.SendEventQ.Parser));
    static readonly grpc::Marshaller<global::gizem.SendEventP> __Marshaller_gizem_SendEventP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.SendEventP.Parser));

    static readonly grpc::Method<global::gizem.SubscribeSessionQ, global::gizem.SubscribeSessionP> __Method_SubscribeSession = new grpc::Method<global::gizem.SubscribeSessionQ, global::gizem.SubscribeSessionP>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeSession",
        __Marshaller_gizem_SubscribeSessionQ,
        __Marshaller_gizem_SubscribeSessionP);

    static readonly grpc::Method<global::gizem.SendEventQ, global::gizem.SendEventP> __Method_SendEvent = new grpc::Method<global::gizem.SendEventQ, global::gizem.SendEventP>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SendEvent",
        __Marshaller_gizem_SendEventQ,
        __Marshaller_gizem_SendEventP);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gizem.GizemReflection.Descriptor.Services[1]; }
    }

    /// <summary>Base class for server-side implementations of WebRTCSignal</summary>
    [grpc::BindServiceMethod(typeof(WebRTCSignal), "BindService")]
    public abstract partial class WebRTCSignalBase
    {
      public virtual global::System.Threading.Tasks.Task SubscribeSession(global::gizem.SubscribeSessionQ request, grpc::IServerStreamWriter<global::gizem.SubscribeSessionP> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task SendEvent(global::gizem.SendEventQ request, grpc::IServerStreamWriter<global::gizem.SendEventP> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(WebRTCSignalBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeSession, serviceImpl.SubscribeSession)
          .AddMethod(__Method_SendEvent, serviceImpl.SendEvent).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, WebRTCSignalBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeSession, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::gizem.SubscribeSessionQ, global::gizem.SubscribeSessionP>(serviceImpl.SubscribeSession));
      serviceBinder.AddMethod(__Method_SendEvent, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::gizem.SendEventQ, global::gizem.SendEventP>(serviceImpl.SendEvent));
    }

  }
  public static partial class Notification
  {
    static readonly string __ServiceName = "gizem.Notification";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::gizem.NotificationQ> __Marshaller_gizem_NotificationQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.NotificationQ.Parser));
    static readonly grpc::Marshaller<global::gizem.NotificationP> __Marshaller_gizem_NotificationP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.NotificationP.Parser));

    static readonly grpc::Method<global::gizem.NotificationQ, global::gizem.NotificationP> __Method_Subscribe = new grpc::Method<global::gizem.NotificationQ, global::gizem.NotificationP>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Subscribe",
        __Marshaller_gizem_NotificationQ,
        __Marshaller_gizem_NotificationP);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gizem.GizemReflection.Descriptor.Services[2]; }
    }

    /// <summary>Base class for server-side implementations of Notification</summary>
    [grpc::BindServiceMethod(typeof(Notification), "BindService")]
    public abstract partial class NotificationBase
    {
      public virtual global::System.Threading.Tasks.Task Subscribe(global::gizem.NotificationQ request, grpc::IServerStreamWriter<global::gizem.NotificationP> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(NotificationBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_Subscribe, serviceImpl.Subscribe).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, NotificationBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_Subscribe, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::gizem.NotificationQ, global::gizem.NotificationP>(serviceImpl.Subscribe));
    }

  }
  public static partial class UserList
  {
    static readonly string __ServiceName = "gizem.UserList";

    static void __Helper_SerializeMessage(global::Google.Protobuf.IMessage message, grpc::SerializationContext context)
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (message is global::Google.Protobuf.IBufferMessage)
      {
        context.SetPayloadLength(message.CalculateSize());
        global::Google.Protobuf.MessageExtensions.WriteTo(message, context.GetBufferWriter());
        context.Complete();
        return;
      }
      #endif
      context.Complete(global::Google.Protobuf.MessageExtensions.ToByteArray(message));
    }

    static class __Helper_MessageCache<T>
    {
      public static readonly bool IsBufferMessage = global::System.Reflection.IntrospectionExtensions.GetTypeInfo(typeof(global::Google.Protobuf.IBufferMessage)).IsAssignableFrom(typeof(T));
    }

    static T __Helper_DeserializeMessage<T>(grpc::DeserializationContext context, global::Google.Protobuf.MessageParser<T> parser) where T : global::Google.Protobuf.IMessage<T>
    {
      #if !GRPC_DISABLE_PROTOBUF_BUFFER_SERIALIZATION
      if (__Helper_MessageCache<T>.IsBufferMessage)
      {
        return parser.ParseFrom(context.PayloadAsReadOnlySequence());
      }
      #endif
      return parser.ParseFrom(context.PayloadAsNewBuffer());
    }

    static readonly grpc::Marshaller<global::gizem.SubscribeListUpdateQ> __Marshaller_gizem_SubscribeListUpdateQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.SubscribeListUpdateQ.Parser));
    static readonly grpc::Marshaller<global::gizem.SubscribeListUpdateP> __Marshaller_gizem_SubscribeListUpdateP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.SubscribeListUpdateP.Parser));
    static readonly grpc::Marshaller<global::gizem.RingQ> __Marshaller_gizem_RingQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.RingQ.Parser));
    static readonly grpc::Marshaller<global::gizem.RingP> __Marshaller_gizem_RingP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.RingP.Parser));
    static readonly grpc::Marshaller<global::gizem.AnswerQ> __Marshaller_gizem_AnswerQ = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.AnswerQ.Parser));
    static readonly grpc::Marshaller<global::gizem.AnswerP> __Marshaller_gizem_AnswerP = grpc::Marshallers.Create(__Helper_SerializeMessage, context => __Helper_DeserializeMessage(context, global::gizem.AnswerP.Parser));

    static readonly grpc::Method<global::gizem.SubscribeListUpdateQ, global::gizem.SubscribeListUpdateP> __Method_SubscribeListUpdate = new grpc::Method<global::gizem.SubscribeListUpdateQ, global::gizem.SubscribeListUpdateP>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "SubscribeListUpdate",
        __Marshaller_gizem_SubscribeListUpdateQ,
        __Marshaller_gizem_SubscribeListUpdateP);

    static readonly grpc::Method<global::gizem.RingQ, global::gizem.RingP> __Method_Ring = new grpc::Method<global::gizem.RingQ, global::gizem.RingP>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Ring",
        __Marshaller_gizem_RingQ,
        __Marshaller_gizem_RingP);

    static readonly grpc::Method<global::gizem.AnswerQ, global::gizem.AnswerP> __Method_Answer = new grpc::Method<global::gizem.AnswerQ, global::gizem.AnswerP>(
        grpc::MethodType.ServerStreaming,
        __ServiceName,
        "Answer",
        __Marshaller_gizem_AnswerQ,
        __Marshaller_gizem_AnswerP);

    /// <summary>Service descriptor</summary>
    public static global::Google.Protobuf.Reflection.ServiceDescriptor Descriptor
    {
      get { return global::gizem.GizemReflection.Descriptor.Services[3]; }
    }

    /// <summary>Base class for server-side implementations of UserList</summary>
    [grpc::BindServiceMethod(typeof(UserList), "BindService")]
    public abstract partial class UserListBase
    {
      public virtual global::System.Threading.Tasks.Task SubscribeListUpdate(global::gizem.SubscribeListUpdateQ request, grpc::IServerStreamWriter<global::gizem.SubscribeListUpdateP> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Ring(global::gizem.RingQ request, grpc::IServerStreamWriter<global::gizem.RingP> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

      public virtual global::System.Threading.Tasks.Task Answer(global::gizem.AnswerQ request, grpc::IServerStreamWriter<global::gizem.AnswerP> responseStream, grpc::ServerCallContext context)
      {
        throw new grpc::RpcException(new grpc::Status(grpc::StatusCode.Unimplemented, ""));
      }

    }

    /// <summary>Creates service definition that can be registered with a server</summary>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static grpc::ServerServiceDefinition BindService(UserListBase serviceImpl)
    {
      return grpc::ServerServiceDefinition.CreateBuilder()
          .AddMethod(__Method_SubscribeListUpdate, serviceImpl.SubscribeListUpdate)
          .AddMethod(__Method_Ring, serviceImpl.Ring)
          .AddMethod(__Method_Answer, serviceImpl.Answer).Build();
    }

    /// <summary>Register service method with a service binder with or without implementation. Useful when customizing the  service binding logic.
    /// Note: this method is part of an experimental API that can change or be removed without any prior notice.</summary>
    /// <param name="serviceBinder">Service methods will be bound by calling <c>AddMethod</c> on this object.</param>
    /// <param name="serviceImpl">An object implementing the server-side handling logic.</param>
    public static void BindService(grpc::ServiceBinderBase serviceBinder, UserListBase serviceImpl)
    {
      serviceBinder.AddMethod(__Method_SubscribeListUpdate, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::gizem.SubscribeListUpdateQ, global::gizem.SubscribeListUpdateP>(serviceImpl.SubscribeListUpdate));
      serviceBinder.AddMethod(__Method_Ring, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::gizem.RingQ, global::gizem.RingP>(serviceImpl.Ring));
      serviceBinder.AddMethod(__Method_Answer, serviceImpl == null ? null : new grpc::ServerStreamingServerMethod<global::gizem.AnswerQ, global::gizem.AnswerP>(serviceImpl.Answer));
    }

  }
}
#endregion
